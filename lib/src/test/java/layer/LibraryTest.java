/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package layer;

import layer.annotations.Module;
import layer.entity.*;
import layer.layer.Logger;
import org.junit.Test;
import layer.annotations.*;


public class LibraryTest {
	@LayerClass
	class console extends layer.entity.Layer {
		public void log(String... name) {
			System.out.println(String.join(" ", name));
		}
	}
	
	@LayerClass
	class fs extends Layer {
		@Require
		Logger logger;
		@Config()
		String version = "0.0.1";
		
		public void printName() {
			logger.warn("fs版本 v" + version + " 已经过时,强制运行会导致爆炸");
		}
	}
	
	@LayerClass
	class fs_mysql extends fs {
		@Override
		public void setup() {
			version = "0.0.2";
		}
	}
	
	@LayerClass
	class run extends Layer {
		@Require()
		fs fs;
		@Require
		Logger logger;
		
		@Override
		public void run() {
			logger.suc();
			logger.suc("mount <-> success");
			fs.printName();
			fs.logger.info("run finish %s", "code 0");
		}
	}
	
	@Provider
	class p0 extends LayerProvider {
		public String name = "p0";
		@Require(name = "ch.p1")
		p1 p1;
	}
	
	@Provider
	class p1 extends LayerProvider {
		public String name = "p1";
		@Require
		Logger logger;
	}
	
	@Controller
	class c0 extends LayerController {
		@Require()
		p0 p0;
		
		public void test() {
			p0.p1.logger.info("..child.child.logger init ..");
		}
		
		@Override
		public void run() {
			test();
		}
	}
	@Module(name = "ch")
	class module_ch extends LayerModule {
		public module_ch() {
			providers = new Layer[]{
				new p1()
			};;
		}
		
		@Override
		public void handelContainer(String name, Container container) {
			container.require("logger");
		}
		
		@Override
		public void handelInstance(Instance ins) {
			ins.instance("logger",t->{
				t.implement(new Logger());
				t.config("name","C");
			});
		}
	}
	
	@Module(name = "main")
	class module_main extends LayerModule {
		public module_main() {
			providers = new Layer[]{
				new p0()
			};
			controllers = new Layer[]{
				new c0()
			};
			imports = new LayerModule[]{
				new module_ch()
			};
		}
	}

	
	@Test
	public void someLibraryMethodReturnsTrue() {
		new Instance()
			.deployInfo()
			.provide(new Layer[]{
				new console(),
				new fs(),
				new fs_mysql(),
				new run(),
			})
			.instance("fs-logger", t -> t
				.implement(new Logger())
				.config("name", "fs")
			)
			.instance("run-logger", t -> t
				.implement(new Logger())
				.config("name", "run")
			)
			.instance("console")
			.instance("fs_mysql",t->t.require("logger","fs-logger"))
			.instance("fs", t -> t
				.config("name", "hhh")
				.require("console")
				.require("logger", "fs-logger")
			)
			.instance("run", t -> t
				.require("fs", "fs_mysql")
				.require("logger", "run-logger")
			)
			.deploy();
		LayerModule.deploy(new module_main(){{
			deployInfo();
		}});
	}
}
